{"version":3,"sources":["webpack://[name]/webpack/universalModuleDefinition","webpack://[name]/webpack/bootstrap","webpack://[name]/./shared/getMinMax.js","webpack://[name]/./shared/decoders/decodeJPEG2000.js","webpack://[name]/./shared/decoders/decodeJPEGLS.js","webpack://[name]/./version.js","webpack://[name]/./shared/calculateMinMax.js","webpack://[name]/./shared/decoders/decodeJPEGLossless.js","webpack://[name]/./shared/decoders/decodeJPEGBaseline.js","webpack://[name]/./shared/decoders/decodeRLE.js","webpack://[name]/./shared/decoders/decodeBigEndian.js","webpack://[name]/./shared/decoders/decodeLittleEndian.js","webpack://[name]/./shared/decodeImageFrame.js","webpack://[name]/./webWorker/decodeTask/decodeTask.js","webpack://[name]/./webWorker/webWorker.js","webpack://[name]/./webWorker/index.js"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","storedPixelData","min","max","storedPixel","numPixels","length","index","Math","openJPEG","decodeOpenJpeg2000","imageFrame","pixelData","image","data","bytesPerPixel","signed","dataPtr","_malloc","writeArrayToMemory","imagePtrPtr","imageSizePtr","imageSizeXPtr","imageSizeYPtr","imageSizeCompPtr","t0","Date","getTime","ccall","console","log","_free","getValue","imagePtr","sx","sy","nbChannels","perf_timetodecode","undefined","src32","Int32Array","HEAP32","buffer","Uint8Array","from","Int16Array","Uint16Array","t1","decodeOpenJPEG","bitsAllocated","pixelRepresentation","columns","rows","photometricInterpretation","initializeJPEG2000","decodeConfig","usePDFJS","OpenJPEG","Error","_jp2_decode","options","arguments","jpxImage","JpxImage","parse","tileCount","tiles","width","height","items","decodeJpx","charLS","initializeJPEGLS","CharLS","_jpegls_decode","isSigned","widthPtr","heightPtr","bitsPerSamplePtr","stridePtr","allowedLossyErrorPtr","componentsPtr","interleaveModePtr","result","bitsPerSample","stride","components","allowedLossyError","interleaveMode","set","HEAP8","HEAP16","jpegLSDecode","strict","minMax","_getMinMax2","default","mustAssign","isNumber","smallestPixelValue","largestPixelValue","warn","_getMinMax","numValue","jpeg","lossless","Decoder","byteOutput","decompressedData","decode","byteOffset","JpegImage","colorTransform","getData","getData16","planarConfiguration","frameData","frameSize","outFrame","ArrayBuffer","samplesPerPixel","header","DataView","Int8Array","out","outIndex","numSegments","getInt32","inIndex","maxIndex","endOfSegment","j","decode8Planar","decode8","highByte","decode16","arrayBuffer","offset","slice","val","Float32Array","transferSyntax","start","_decodeLittleEndian2","_decodeBigEndian2","_decodeRLE2","_decodeJPEGBaseline2","_decodeJPEGLossless2","_decodeJPEGLS2","_decodeJPEG2","shouldShift","shift","bitsStored","end","decodeTimeInMS","_decodeJPEG","_decodeJPEGLS","codecsLoaded","loadCodecs","config","self","importScripts","decodeTask","codecsPath","initializeCodecsOnStartup","taskType","handler","doneCallback","_decodeImageFrame2","_calculateMinMax2","initialize","loadCodecsOnStartup","registerTaskHandler","taskHandler","taskHandlers","initialized","taskConfiguration","onmessage","msg","sourcePath","transferList","postMessage","status","workerIndex","webWorkerTaskPaths","keys","forEach","_webWorker"],"mappings":"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","file":"cornerstoneWADOImageLoaderWebWorker.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"cornerstoneWADOImageLoaderWebWorker\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"cornerstoneWADOImageLoaderWebWorker\"] = factory();\n\telse\n\t\troot[\"cornerstoneWADOImageLoaderWebWorker\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 48);\n","/**\r\n * Calculate the minimum and maximum values in an Array\r\n *\r\n * @param {Number[]} storedPixelData\r\n * @return {{min: Number, max: Number}}\r\n */\r\nfunction getMinMax (storedPixelData) {\r\n  // we always calculate the min max values since they are not always\r\n  // present in DICOM and we don't want to trust them anyway as cornerstone\r\n  // depends on us providing reliable values for these\r\n  let min = storedPixelData[0];\r\n  let max = storedPixelData[0];\r\n  let storedPixel;\r\n  const numPixels = storedPixelData.length;\r\n\r\n  for (let index = 1; index < numPixels; index++) {\r\n    storedPixel = storedPixelData[index];\r\n    min = Math.min(min, storedPixel);\r\n    max = Math.max(max, storedPixel);\r\n  }\r\n\r\n  return {\r\n    min,\r\n    max\r\n  };\r\n}\r\n\r\nexport default getMinMax;\r\n","function decodeJpx (imageFrame, pixelData) {\r\n  const jpxImage = new JpxImage();\r\n\r\n  jpxImage.parse(pixelData);\r\n\r\n  const tileCount = jpxImage.tiles.length;\r\n\r\n  if (tileCount !== 1) {\r\n    throw new Error(`JPEG2000 decoder returned a tileCount of ${tileCount}, when 1 is expected`);\r\n  }\r\n\r\n  imageFrame.columns = jpxImage.width;\r\n  imageFrame.rows = jpxImage.height;\r\n  imageFrame.pixelData = jpxImage.tiles[0].items;\r\n\r\n  return imageFrame;\r\n}\r\n\r\nlet openJPEG;\r\n\r\nfunction decodeOpenJPEG (data, bytesPerPixel, signed) {\r\n  const dataPtr = openJPEG._malloc(data.length);\r\n\r\n  openJPEG.writeArrayToMemory(data, dataPtr);\r\n\r\n  // create param outpout\r\n  const imagePtrPtr = openJPEG._malloc(4);\r\n  const imageSizePtr = openJPEG._malloc(4);\r\n  const imageSizeXPtr = openJPEG._malloc(4);\r\n  const imageSizeYPtr = openJPEG._malloc(4);\r\n  const imageSizeCompPtr = openJPEG._malloc(4);\r\n\r\n  const t0 = new Date().getTime();\r\n  const ret = openJPEG.ccall('jp2_decode', 'number', ['number', 'number', 'number', 'number', 'number', 'number', 'number'],\r\n    [dataPtr, data.length, imagePtrPtr, imageSizePtr, imageSizeXPtr, imageSizeYPtr, imageSizeCompPtr]);\r\n  // add num vomp..etc\r\n\r\n  if (ret !== 0) {\r\n    console.log('[opj_decode] decoding failed!');\r\n    openJPEG._free(dataPtr);\r\n    openJPEG._free(openJPEG.getValue(imagePtrPtr, '*'));\r\n    openJPEG._free(imageSizeXPtr);\r\n    openJPEG._free(imageSizeYPtr);\r\n    openJPEG._free(imageSizePtr);\r\n    openJPEG._free(imageSizeCompPtr);\r\n\r\n    return;\r\n  }\r\n\r\n  const imagePtr = openJPEG.getValue(imagePtrPtr, '*');\r\n\r\n  const image = {\r\n    length: openJPEG.getValue(imageSizePtr, 'i32'),\r\n    sx: openJPEG.getValue(imageSizeXPtr, 'i32'),\r\n    sy: openJPEG.getValue(imageSizeYPtr, 'i32'),\r\n    nbChannels: openJPEG.getValue(imageSizeCompPtr, 'i32'), // hard coded for now\r\n    perf_timetodecode: undefined,\r\n    pixelData: undefined\r\n  };\r\n\r\n  // Copy the data from the EMSCRIPTEN heap into the correct type array\r\n  const length = image.sx * image.sy * image.nbChannels;\r\n  const src32 = new Int32Array(openJPEG.HEAP32.buffer, imagePtr, length);\r\n\r\n  if (bytesPerPixel === 1) {\r\n    if (Uint8Array.from) {\r\n      image.pixelData = Uint8Array.from(src32);\r\n    } else {\r\n      image.pixelData = new Uint8Array(length);\r\n      for (let i = 0; i < length; i++) {\r\n        image.pixelData[i] = src32[i];\r\n      }\r\n    }\r\n  } else if (signed) {\r\n    if (Int16Array.from) {\r\n      image.pixelData = Int16Array.from(src32);\r\n    } else {\r\n      image.pixelData = new Int16Array(length);\r\n      for (let i = 0; i < length; i++) {\r\n        image.pixelData[i] = src32[i];\r\n      }\r\n    }\r\n  } else if (Uint16Array.from) {\r\n    image.pixelData = Uint16Array.from(src32);\r\n  } else {\r\n    image.pixelData = new Uint16Array(length);\r\n    for (let i = 0; i < length; i++) {\r\n      image.pixelData[i] = src32[i];\r\n    }\r\n  }\r\n\r\n  const t1 = new Date().getTime();\r\n\r\n  image.perf_timetodecode = t1 - t0;\r\n\r\n  // free\r\n  openJPEG._free(dataPtr);\r\n  openJPEG._free(imagePtrPtr);\r\n  openJPEG._free(imagePtr);\r\n  openJPEG._free(imageSizePtr);\r\n  openJPEG._free(imageSizeXPtr);\r\n  openJPEG._free(imageSizeYPtr);\r\n  openJPEG._free(imageSizeCompPtr);\r\n\r\n  return image;\r\n}\r\n\r\nfunction decodeOpenJpeg2000 (imageFrame, pixelData) {\r\n  const bytesPerPixel = imageFrame.bitsAllocated <= 8 ? 1 : 2;\r\n  const signed = imageFrame.pixelRepresentation === 1;\r\n\r\n  const image = decodeOpenJPEG(pixelData, bytesPerPixel, signed);\r\n\r\n  imageFrame.columns = image.sx;\r\n  imageFrame.rows = image.sy;\r\n  imageFrame.pixelData = image.pixelData;\r\n  if (image.nbChannels > 1) {\r\n    imageFrame.photometricInterpretation = 'RGB';\r\n  }\r\n\r\n  return imageFrame;\r\n}\r\n\r\nfunction initializeJPEG2000 (decodeConfig) {\r\n  // check to make sure codec is loaded\r\n  if (!decodeConfig.usePDFJS) {\r\n    if (typeof OpenJPEG === 'undefined') {\r\n      throw new Error('OpenJPEG decoder not loaded');\r\n    }\r\n  }\r\n\r\n  if (!openJPEG) {\r\n    openJPEG = OpenJPEG();\r\n    if (!openJPEG || !openJPEG._jp2_decode) {\r\n      throw new Error('OpenJPEG failed to initialize');\r\n    }\r\n  }\r\n}\r\n\r\nfunction decodeJPEG2000 (imageFrame, pixelData, decodeConfig, options = {}) {\r\n  initializeJPEG2000(decodeConfig);\r\n\r\n  if (options.usePDFJS || decodeConfig.usePDFJS) {\r\n    // OHIF image-JPEG2000 https://github.com/OHIF/image-JPEG2000\r\n    // console.log('PDFJS')\r\n    return decodeJpx(imageFrame, pixelData);\r\n  }\r\n\r\n  // OpenJPEG2000 https://github.com/jpambrun/openjpeg\r\n  // console.log('OpenJPEG')\r\n  return decodeOpenJpeg2000(imageFrame, pixelData);\r\n}\r\n\r\nexport default decodeJPEG2000;\r\nexport { initializeJPEG2000 };\r\n","let charLS;\r\n\r\nfunction jpegLSDecode (data, isSigned) {\r\n  // prepare input parameters\r\n  const dataPtr = charLS._malloc(data.length);\r\n\r\n  charLS.writeArrayToMemory(data, dataPtr);\r\n\r\n  // prepare output parameters\r\n  const imagePtrPtr = charLS._malloc(4);\r\n  const imageSizePtr = charLS._malloc(4);\r\n  const widthPtr = charLS._malloc(4);\r\n  const heightPtr = charLS._malloc(4);\r\n  const bitsPerSamplePtr = charLS._malloc(4);\r\n  const stridePtr = charLS._malloc(4);\r\n  const allowedLossyErrorPtr = charLS._malloc(4);\r\n  const componentsPtr = charLS._malloc(4);\r\n  const interleaveModePtr = charLS._malloc(4);\r\n\r\n  // Decode the image\r\n  const result = charLS.ccall(\r\n    'jpegls_decode',\r\n    'number',\r\n    ['number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number'],\r\n    [dataPtr, data.length, imagePtrPtr, imageSizePtr, widthPtr, heightPtr, bitsPerSamplePtr, stridePtr, componentsPtr, allowedLossyErrorPtr, interleaveModePtr]\r\n  );\r\n\r\n  // Extract result values into object\r\n  const image = {\r\n    result,\r\n    width: charLS.getValue(widthPtr, 'i32'),\r\n    height: charLS.getValue(heightPtr, 'i32'),\r\n    bitsPerSample: charLS.getValue(bitsPerSamplePtr, 'i32'),\r\n    stride: charLS.getValue(stridePtr, 'i32'),\r\n    components: charLS.getValue(componentsPtr, 'i32'),\r\n    allowedLossyError: charLS.getValue(allowedLossyErrorPtr, 'i32'),\r\n    interleaveMode: charLS.getValue(interleaveModePtr, 'i32'),\r\n    pixelData: undefined\r\n  };\r\n\r\n  // Copy image from emscripten heap into appropriate array buffer type\r\n  const imagePtr = charLS.getValue(imagePtrPtr, '*');\r\n\r\n  if (image.bitsPerSample <= 8) {\r\n    image.pixelData = new Uint8Array(image.width * image.height * image.components);\r\n    image.pixelData.set(new Uint8Array(charLS.HEAP8.buffer, imagePtr, image.pixelData.length));\r\n  } else if (isSigned) {\r\n    image.pixelData = new Int16Array(image.width * image.height * image.components);\r\n    image.pixelData.set(new Int16Array(charLS.HEAP16.buffer, imagePtr, image.pixelData.length));\r\n  } else {\r\n    image.pixelData = new Uint16Array(image.width * image.height * image.components);\r\n    image.pixelData.set(new Uint16Array(charLS.HEAP16.buffer, imagePtr, image.pixelData.length));\r\n  }\r\n\r\n  // free memory and return image object\r\n  charLS._free(dataPtr);\r\n  charLS._free(imagePtr);\r\n  charLS._free(imagePtrPtr);\r\n  charLS._free(imageSizePtr);\r\n  charLS._free(widthPtr);\r\n  charLS._free(heightPtr);\r\n  charLS._free(bitsPerSamplePtr);\r\n  charLS._free(stridePtr);\r\n  charLS._free(componentsPtr);\r\n  charLS._free(interleaveModePtr);\r\n\r\n  return image;\r\n}\r\n\r\nfunction initializeJPEGLS () {\r\n  // check to make sure codec is loaded\r\n  if (typeof CharLS === 'undefined') {\r\n    throw new Error('No JPEG-LS decoder loaded');\r\n  }\r\n\r\n  // Try to initialize CharLS\r\n  // CharLS https://github.com/cornerstonejs/charls\r\n  if (!charLS) {\r\n    charLS = CharLS();\r\n    if (!charLS || !charLS._jpegls_decode) {\r\n      throw new Error('JPEG-LS failed to initialize');\r\n    }\r\n  }\r\n\r\n}\r\n\r\nfunction decodeJPEGLS (imageFrame, pixelData) {\r\n  initializeJPEGLS();\r\n\r\n  const image = jpegLSDecode(pixelData, imageFrame.pixelRepresentation === 1);\r\n\r\n  // throw error if not success or too much data\r\n  if (image.result !== 0 && image.result !== 6) {\r\n    throw new Error(`JPEG-LS decoder failed to decode frame (error code ${image.result})`);\r\n  }\r\n\r\n  imageFrame.columns = image.width;\r\n  imageFrame.rows = image.height;\r\n  imageFrame.pixelData = image.pixelData;\r\n\r\n  return imageFrame;\r\n}\r\n\r\nexport default decodeJPEGLS;\r\nexport { initializeJPEGLS };\r\n","export default '2.1.2';\n","import getMinMax from './getMinMax.js';\r\n\r\n/**\r\n * Check the minimum and maximum values in the imageFrame pixel data\r\n * match with the provided smallestPixelValue and largestPixelValue metaData.\r\n *\r\n * If 'strict' is true, log to the console a warning if these values do not match.\r\n * Otherwise, correct them automatically.\r\n *\r\n * @param {Object} imageFrame\r\n * @param {Boolean} strict If 'strict' is true, log to the console a warning if these values do not match.\r\n * Otherwise, correct them automatically.Default is true.\r\n */\r\nexport default function calculateMinMax (imageFrame, strict = true) {\r\n  const minMax = getMinMax(imageFrame.pixelData);\r\n  const mustAssign = !(isNumber(imageFrame.smallestPixelValue) && isNumber(imageFrame.largestPixelValue));\r\n\r\n\r\n  if (strict === true && !mustAssign) {\r\n    if (imageFrame.smallestPixelValue !== minMax.min) {\r\n      console.warn('Image smallestPixelValue tag is incorrect. Rendering performance will suffer considerably.');\r\n    }\r\n\r\n    if (imageFrame.largestPixelValue !== minMax.max) {\r\n      console.warn('Image largestPixelValue tag is incorrect. Rendering performance will suffer considerably.');\r\n    }\r\n  } else {\r\n    imageFrame.smallestPixelValue = minMax.min;\r\n    imageFrame.largestPixelValue = minMax.max;\r\n  }\r\n}\r\n\r\nfunction isNumber(numValue) {\r\n  return typeof numValue === \"number\";\r\n}\r\n","\r\n\r\nfunction decodeJPEGLossless (imageFrame, pixelData) {\r\n  // check to make sure codec is loaded\r\n  if (typeof jpeg === 'undefined' ||\r\n    typeof jpeg.lossless === 'undefined' ||\r\n    typeof jpeg.lossless.Decoder === 'undefined') {\r\n    throw new Error('No JPEG Lossless decoder loaded');\r\n  }\r\n\r\n  const byteOutput = imageFrame.bitsAllocated <= 8 ? 1 : 2;\r\n  // console.time('jpeglossless');\r\n  const buffer = pixelData.buffer;\r\n  const decoder = new jpeg.lossless.Decoder();\r\n  const decompressedData = decoder.decode(buffer, pixelData.byteOffset, pixelData.length, byteOutput);\r\n  // console.timeEnd('jpeglossless');\r\n\r\n  if (imageFrame.pixelRepresentation === 0) {\r\n    if (imageFrame.bitsAllocated === 16) {\r\n      imageFrame.pixelData = new Uint16Array(decompressedData.buffer);\r\n\r\n      return imageFrame;\r\n    }\r\n    // untested!\r\n    imageFrame.pixelData = new Uint8Array(decompressedData.buffer);\r\n\r\n    return imageFrame;\r\n\r\n  }\r\n  imageFrame.pixelData = new Int16Array(decompressedData.buffer);\r\n\r\n  return imageFrame;\r\n\r\n}\r\n\r\nexport default decodeJPEGLossless;\r\n","\r\n\r\nfunction decodeJPEGBaseline (imageFrame, pixelData) {\r\n  // check to make sure codec is loaded\r\n  if (typeof JpegImage === 'undefined') {\r\n    throw new Error('No JPEG Baseline decoder loaded');\r\n  }\r\n  const jpeg = new JpegImage();\r\n\r\n  jpeg.parse(pixelData);\r\n\r\n  // Do not use the internal jpeg.js color transformation,\r\n  // since we will handle this afterwards\r\n  jpeg.colorTransform = false;\r\n\r\n  if (imageFrame.bitsAllocated === 8) {\r\n    imageFrame.pixelData = jpeg.getData(imageFrame.columns, imageFrame.rows);\r\n\r\n    return imageFrame;\r\n  } else if (imageFrame.bitsAllocated === 16) {\r\n    imageFrame.pixelData = jpeg.getData16(imageFrame.columns, imageFrame.rows);\r\n\r\n    return imageFrame;\r\n  }\r\n}\r\n\r\nexport default decodeJPEGBaseline;\r\n","function decodeRLE (imageFrame, pixelData) {\r\n  if (imageFrame.bitsAllocated === 8) {\r\n    if (imageFrame.planarConfiguration) {\r\n      return decode8Planar(imageFrame, pixelData);\r\n    }\r\n\r\n    return decode8(imageFrame, pixelData);\r\n  } else if (imageFrame.bitsAllocated === 16) {\r\n    return decode16(imageFrame, pixelData);\r\n  }\r\n\r\n  throw new Error('unsupported pixel format for RLE');\r\n}\r\n\r\nfunction decode8 (imageFrame, pixelData) {\r\n  const frameData = pixelData;\r\n  const frameSize = imageFrame.rows * imageFrame.columns;\r\n  const outFrame = new ArrayBuffer(frameSize * imageFrame.samplesPerPixel);\r\n  const header = new DataView(frameData.buffer, frameData.byteOffset);\r\n  const data = new Int8Array(frameData.buffer, frameData.byteOffset);\r\n  const out = new Int8Array(outFrame);\r\n\r\n  let outIndex = 0;\r\n  const numSegments = header.getInt32(0, true);\r\n\r\n  for (let s = 0; s < numSegments; ++s) {\r\n    outIndex = s;\r\n\r\n    let inIndex = header.getInt32((s + 1) * 4, true);\r\n    let maxIndex = header.getInt32((s + 2) * 4, true);\r\n\r\n    if (maxIndex === 0) {\r\n      maxIndex = frameData.length;\r\n    }\r\n\r\n    const endOfSegment = frameSize * numSegments;\r\n\r\n    while (inIndex < maxIndex) {\r\n      const n = data[inIndex++];\r\n\r\n      if (n >= 0 && n <= 127) {\r\n        // copy n bytes\r\n        for (let i = 0; i < n + 1 && outIndex < endOfSegment; ++i) {\r\n          out[outIndex] = data[inIndex++];\r\n          outIndex += imageFrame.samplesPerPixel;\r\n        }\r\n      } else if (n <= -1 && n >= -127) {\r\n        const value = data[inIndex++];\r\n        // run of n bytes\r\n\r\n        for (let j = 0; j < -n + 1 && outIndex < endOfSegment; ++j) {\r\n          out[outIndex] = value;\r\n          outIndex += imageFrame.samplesPerPixel;\r\n        }\r\n      }/* else if (n === -128) {\r\n\r\n      } // do nothing */\r\n    }\r\n  }\r\n  imageFrame.pixelData = new Uint8Array(outFrame);\r\n\r\n  return imageFrame;\r\n}\r\n\r\nfunction decode8Planar (imageFrame, pixelData) {\r\n  const frameData = pixelData;\r\n  const frameSize = imageFrame.rows * imageFrame.columns;\r\n  const outFrame = new ArrayBuffer(frameSize * imageFrame.samplesPerPixel);\r\n  const header = new DataView(frameData.buffer, frameData.byteOffset);\r\n  const data = new Int8Array(frameData.buffer, frameData.byteOffset);\r\n  const out = new Int8Array(outFrame);\r\n\r\n  let outIndex = 0;\r\n  const numSegments = header.getInt32(0, true);\r\n\r\n  for (let s = 0; s < numSegments; ++s) {\r\n    outIndex = s * frameSize;\r\n\r\n    let inIndex = header.getInt32((s + 1) * 4, true);\r\n    let maxIndex = header.getInt32((s + 2) * 4, true);\r\n\r\n    if (maxIndex === 0) {\r\n      maxIndex = frameData.length;\r\n    }\r\n\r\n    const endOfSegment = frameSize * numSegments;\r\n\r\n    while (inIndex < maxIndex) {\r\n      const n = data[inIndex++];\r\n\r\n      if (n >= 0 && n <= 127) {\r\n        // copy n bytes\r\n        for (let i = 0; i < n + 1 && outIndex < endOfSegment; ++i) {\r\n          out[outIndex] = data[inIndex++];\r\n          outIndex++;\r\n        }\r\n      } else if (n <= -1 && n >= -127) {\r\n        const value = data[inIndex++];\r\n        // run of n bytes\r\n\r\n        for (let j = 0; j < -n + 1 && outIndex < endOfSegment; ++j) {\r\n          out[outIndex] = value;\r\n          outIndex++;\r\n        }\r\n      }/* else if (n === -128) {\r\n\r\n      } // do nothing */\r\n    }\r\n  }\r\n  imageFrame.pixelData = new Uint8Array(outFrame);\r\n\r\n  return imageFrame;\r\n}\r\n\r\nfunction decode16 (imageFrame, pixelData) {\r\n  const frameData = pixelData;\r\n  const frameSize = imageFrame.rows * imageFrame.columns;\r\n  const outFrame = new ArrayBuffer(frameSize * imageFrame.samplesPerPixel * 2);\r\n\r\n  const header = new DataView(frameData.buffer, frameData.byteOffset);\r\n  const data = new Int8Array(frameData.buffer, frameData.byteOffset);\r\n  const out = new Int8Array(outFrame);\r\n\r\n  const numSegments = header.getInt32(0, true);\r\n\r\n  for (let s = 0; s < numSegments; ++s) {\r\n    let outIndex = 0;\r\n    const highByte = (s === 0 ? 1 : 0);\r\n\r\n    let inIndex = header.getInt32((s + 1) * 4, true);\r\n    let maxIndex = header.getInt32((s + 2) * 4, true);\r\n\r\n    if (maxIndex === 0) {\r\n      maxIndex = frameData.length;\r\n    }\r\n\r\n    while (inIndex < maxIndex) {\r\n      const n = data[inIndex++];\r\n\r\n      if (n >= 0 && n <= 127) {\r\n        for (let i = 0; i < n + 1 && outIndex < frameSize; ++i) {\r\n          out[(outIndex * 2) + highByte] = data[inIndex++];\r\n          outIndex++;\r\n        }\r\n      } else if (n <= -1 && n >= -127) {\r\n        const value = data[inIndex++];\r\n\r\n        for (let j = 0; j < -n + 1 && outIndex < frameSize; ++j) {\r\n          out[(outIndex * 2) + highByte] = value;\r\n          outIndex++;\r\n        }\r\n      }/* else if (n === -128) {\r\n\r\n      } // do nothing */\r\n    }\r\n  }\r\n  if (imageFrame.pixelRepresentation === 0) {\r\n    imageFrame.pixelData = new Uint16Array(outFrame);\r\n  } else {\r\n    imageFrame.pixelData = new Int16Array(outFrame);\r\n  }\r\n\r\n  return imageFrame;\r\n}\r\n\r\nexport default decodeRLE;\r\n","/* eslint no-bitwise: 0 */\r\nfunction swap16 (val) {\r\n  return ((val & 0xFF) << 8) |\r\n    ((val >> 8) & 0xFF);\r\n}\r\n\r\n\r\nfunction decodeBigEndian (imageFrame, pixelData) {\r\n  if (imageFrame.bitsAllocated === 16) {\r\n    let arrayBuffer = pixelData.buffer;\r\n    let offset = pixelData.byteOffset;\r\n    const length = pixelData.length;\r\n    // if pixel data is not aligned on even boundary, shift it so we can create the 16 bit array\r\n    // buffers on it\r\n\r\n    if (offset % 2) {\r\n      arrayBuffer = arrayBuffer.slice(offset);\r\n      offset = 0;\r\n    }\r\n\r\n    if (imageFrame.pixelRepresentation === 0) {\r\n      imageFrame.pixelData = new Uint16Array(arrayBuffer, offset, length / 2);\r\n    } else {\r\n      imageFrame.pixelData = new Int16Array(arrayBuffer, offset, length / 2);\r\n    }\r\n    // Do the byte swap\r\n    for (let i = 0; i < imageFrame.pixelData.length; i++) {\r\n      imageFrame.pixelData[i] = swap16(imageFrame.pixelData[i]);\r\n    }\r\n\r\n  } else if (imageFrame.bitsAllocated === 8) {\r\n    imageFrame.pixelData = pixelData;\r\n  }\r\n\r\n  return imageFrame;\r\n}\r\n\r\nexport default decodeBigEndian;\r\n","function decodeLittleEndian (imageFrame, pixelData) {\r\n  let arrayBuffer = pixelData.buffer;\r\n  let offset = pixelData.byteOffset;\r\n  const length = pixelData.length;\r\n\r\n  if (imageFrame.bitsAllocated === 16) {\r\n    // if pixel data is not aligned on even boundary, shift it so we can create the 16 bit array\r\n    // buffers on it\r\n    if (offset % 2) {\r\n      arrayBuffer = arrayBuffer.slice(offset);\r\n      offset = 0;\r\n    }\r\n\r\n    if (imageFrame.pixelRepresentation === 0) {\r\n      imageFrame.pixelData = new Uint16Array(arrayBuffer, offset, length / 2);\r\n    } else {\r\n      imageFrame.pixelData = new Int16Array(arrayBuffer, offset, length / 2);\r\n    }\r\n  } else if (imageFrame.bitsAllocated === 8 || imageFrame.bitsAllocated === 1) {\r\n    imageFrame.pixelData = pixelData;\r\n  } else if (imageFrame.bitsAllocated === 32) {\r\n    // if pixel data is not aligned on even boundary, shift it\r\n    if (offset % 2) {\r\n      arrayBuffer = arrayBuffer.slice(offset);\r\n      offset = 0;\r\n    }\r\n\r\n    imageFrame.pixelData = new Float32Array(arrayBuffer, offset, length / 4);\r\n  }\r\n\r\n  return imageFrame;\r\n}\r\n\r\nexport default decodeLittleEndian;\r\n","import decodeLittleEndian from './decoders/decodeLittleEndian.js';\r\nimport decodeBigEndian from './decoders/decodeBigEndian.js';\r\nimport decodeRLE from './decoders/decodeRLE.js';\r\nimport decodeJPEGBaseline from './decoders/decodeJPEGBaseline.js';\r\nimport decodeJPEGLossless from './decoders/decodeJPEGLossless.js';\r\nimport decodeJPEGLS from './decoders/decodeJPEGLS.js';\r\nimport decodeJPEG2000 from './decoders/decodeJPEG2000.js';\r\n\r\nfunction decodeImageFrame (imageFrame, transferSyntax, pixelData, decodeConfig, options) {\r\n  const start = new Date().getTime();\r\n\r\n  if (transferSyntax === '1.2.840.10008.1.2') {\r\n    // Implicit VR Little Endian\r\n    imageFrame = decodeLittleEndian(imageFrame, pixelData);\r\n  } else if (transferSyntax === '1.2.840.10008.1.2.1') {\r\n    // Explicit VR Little Endian\r\n    imageFrame = decodeLittleEndian(imageFrame, pixelData);\r\n  } else if (transferSyntax === '1.2.840.10008.1.2.2') {\r\n    // Explicit VR Big Endian (retired)\r\n    imageFrame = decodeBigEndian(imageFrame, pixelData);\r\n  } else if (transferSyntax === '1.2.840.10008.1.2.1.99') {\r\n    // Deflate transfer syntax (deflated by dicomParser)\r\n    imageFrame = decodeLittleEndian(imageFrame, pixelData);\r\n  } else if (transferSyntax === '1.2.840.10008.1.2.5') {\r\n    // RLE Lossless\r\n    imageFrame = decodeRLE(imageFrame, pixelData);\r\n  } else if (transferSyntax === '1.2.840.10008.1.2.4.50') {\r\n    // JPEG Baseline lossy process 1 (8 bit)\r\n    imageFrame = decodeJPEGBaseline(imageFrame, pixelData);\r\n  } else if (transferSyntax === '1.2.840.10008.1.2.4.51') {\r\n    // JPEG Baseline lossy process 2 & 4 (12 bit)\r\n    imageFrame = decodeJPEGBaseline(imageFrame, pixelData);\r\n  } else if (transferSyntax === '1.2.840.10008.1.2.4.57') {\r\n    // JPEG Lossless, Nonhierarchical (Processes 14)\r\n    imageFrame = decodeJPEGLossless(imageFrame, pixelData);\r\n  } else if (transferSyntax === '1.2.840.10008.1.2.4.70') {\r\n    // JPEG Lossless, Nonhierarchical (Processes 14 [Selection 1])\r\n    imageFrame = decodeJPEGLossless(imageFrame, pixelData);\r\n  } else if (transferSyntax === '1.2.840.10008.1.2.4.80') {\r\n    // JPEG-LS Lossless Image Compression\r\n    imageFrame = decodeJPEGLS(imageFrame, pixelData);\r\n  } else if (transferSyntax === '1.2.840.10008.1.2.4.81') {\r\n    // JPEG-LS Lossy (Near-Lossless) Image Compression\r\n    imageFrame = decodeJPEGLS(imageFrame, pixelData);\r\n  } else if (transferSyntax === '1.2.840.10008.1.2.4.90') {\r\n    // JPEG 2000 Lossless\r\n    imageFrame = decodeJPEG2000(imageFrame, pixelData, decodeConfig, options);\r\n  } else if (transferSyntax === '1.2.840.10008.1.2.4.91') {\r\n    // JPEG 2000 Lossy\r\n    imageFrame = decodeJPEG2000(imageFrame, pixelData, decodeConfig, options);\r\n  } else {\r\n    throw new Error(`no decoder for transfer syntax ${transferSyntax}`);\r\n  }\r\n\r\n  /* Don't know if these work...\r\n   // JPEG 2000 Part 2 Multicomponent Image Compression (Lossless Only)\r\n   else if(transferSyntax === \"1.2.840.10008.1.2.4.92\")\r\n   {\r\n   return decodeJPEG2000(dataSet, frame);\r\n   }\r\n   // JPEG 2000 Part 2 Multicomponent Image Compression\r\n   else if(transferSyntax === \"1.2.840.10008.1.2.4.93\")\r\n   {\r\n   return decodeJPEG2000(dataSet, frame);\r\n   }\r\n   */\r\n\r\n  const shouldShift = imageFrame.pixelRepresentation !== undefined && imageFrame.pixelRepresentation === 1;\r\n  const shift = (shouldShift && imageFrame.bitsStored !== undefined) ? (32 - imageFrame.bitsStored) : undefined;\r\n\r\n  if (shouldShift && shift !== undefined) {\r\n    for (let i = 0; i < imageFrame.pixelData.length; i++) {\r\n      // eslint-disable-next-line no-bitwise\r\n      imageFrame.pixelData[i] = (imageFrame.pixelData[i] << shift >> shift);\r\n    }\r\n  }\r\n\r\n  const end = new Date().getTime();\r\n\r\n  imageFrame.decodeTimeInMS = end - start;\r\n\r\n  return imageFrame;\r\n}\r\n\r\nexport default decodeImageFrame;\r\n","import { initializeJPEG2000 } from '../../shared/decoders/decodeJPEG2000.js';\r\nimport { initializeJPEGLS } from '../../shared/decoders/decodeJPEGLS.js';\r\nimport calculateMinMax from '../../shared/calculateMinMax.js';\r\nimport decodeImageFrame from '../../shared/decodeImageFrame.js';\r\n\r\n// flag to ensure codecs are loaded only once\r\nlet codecsLoaded = false;\r\n\r\n// the configuration object for the decodeTask\r\nlet decodeConfig;\r\n\r\n/**\r\n * Function to control loading and initializing the codecs\r\n * @param config\r\n */\r\nfunction loadCodecs (config) {\r\n  // prevent loading codecs more than once\r\n  if (codecsLoaded) {\r\n    return;\r\n  }\r\n\r\n  // Load the codecs\r\n  // console.time('loadCodecs');\r\n  self.importScripts(config.decodeTask.codecsPath);\r\n  codecsLoaded = true;\r\n  // console.timeEnd('loadCodecs');\r\n\r\n  // Initialize the codecs\r\n  if (config.decodeTask.initializeCodecsOnStartup) {\r\n    // console.time('initializeCodecs');\r\n    initializeJPEG2000(config.decodeTask);\r\n    initializeJPEGLS(config.decodeTask);\r\n    // console.timeEnd('initializeCodecs');\r\n  }\r\n}\r\n\r\n/**\r\n * Task initialization function\r\n */\r\nfunction initialize (config) {\r\n  decodeConfig = config;\r\n  if (config.decodeTask.loadCodecsOnStartup) {\r\n    loadCodecs(config);\r\n  }\r\n}\r\n\r\n/**\r\n * Task handler function\r\n */\r\nfunction handler (data, doneCallback) {\r\n  // Load the codecs if they aren't already loaded\r\n  loadCodecs(decodeConfig);\r\n\r\n  const strict = decodeConfig && decodeConfig.decodeTask && decodeConfig.decodeTask.strict;\r\n  const imageFrame = data.data.imageFrame;\r\n\r\n  // convert pixel data from ArrayBuffer to Uint8Array since web workers support passing ArrayBuffers but\r\n  // not typed arrays\r\n  const pixelData = new Uint8Array(data.data.pixelData);\r\n\r\n  decodeImageFrame(\r\n    imageFrame,\r\n    data.data.transferSyntax,\r\n    pixelData,\r\n    decodeConfig.decodeTask,\r\n    data.data.options);\r\n\r\n  if (!imageFrame.pixelData) {\r\n    throw new Error('decodeTask: imageFrame.pixelData is undefined after decoding');\r\n  }\r\n\r\n  calculateMinMax(imageFrame, strict);\r\n\r\n  // convert from TypedArray to ArrayBuffer since web workers support passing ArrayBuffers but not\r\n  // typed arrays\r\n  imageFrame.pixelData = imageFrame.pixelData.buffer;\r\n\r\n  // invoke the callback with our result and pass the pixelData in the transferList to move it to\r\n  // UI thread without making a copy\r\n  doneCallback(imageFrame, [imageFrame.pixelData]);\r\n}\r\n\r\nexport default {\r\n  taskType: 'decodeTask',\r\n  handler,\r\n  initialize\r\n};\r\n","// an object of task handlers\r\nconst taskHandlers = {};\r\n\r\n// Flag to ensure web worker is only initialized once\r\nlet initialized = false;\r\n\r\n// the configuration object passed in when the web worker manager is initialized\r\nlet config;\r\n\r\n/**\r\n * Initialization function that loads additional web workers and initializes them\r\n * @param data\r\n */\r\nfunction initialize (data) {\r\n  // console.log('web worker initialize ', data.workerIndex);\r\n  // prevent initialization from happening more than once\r\n  if (initialized) {\r\n    return;\r\n  }\r\n\r\n  // save the config data\r\n  config = data.config;\r\n\r\n  // load any additional web worker tasks\r\n  if (data.config.webWorkerTaskPaths) {\r\n    for (let i = 0; i < data.config.webWorkerTaskPaths.length; i++) {\r\n      self.importScripts(data.config.webWorkerTaskPaths[i]);\r\n    }\r\n  }\r\n\r\n  // initialize each task handler\r\n  Object.keys(taskHandlers).forEach(function (key) {\r\n    taskHandlers[key].initialize(config.taskConfiguration);\r\n  });\r\n\r\n  // tell main ui thread that we have completed initialization\r\n  self.postMessage({\r\n    taskType: 'initialize',\r\n    status: 'success',\r\n    result: {\r\n    },\r\n    workerIndex: data.workerIndex\r\n  });\r\n\r\n  initialized = true;\r\n}\r\n\r\n/**\r\n * Function exposed to web worker tasks to register themselves\r\n * @param taskHandler\r\n */\r\nexport function registerTaskHandler (taskHandler) {\r\n  if (taskHandlers[taskHandler.taskType]) {\r\n    console.log('attempt to register duplicate task handler \"', taskHandler.taskType, '\"');\r\n\r\n    return false;\r\n  }\r\n  taskHandlers[taskHandler.taskType] = taskHandler;\r\n  if (initialized) {\r\n    taskHandler.initialize(config.taskConfiguration);\r\n  }\r\n}\r\n\r\n/**\r\n * Function to load a new web worker task with updated configuration\r\n * @param data\r\n */\r\nfunction loadWebWorkerTask (data) {\r\n  config = data.config;\r\n  self.importScripts(data.sourcePath);\r\n}\r\n\r\n/**\r\n * Web worker message handler - dispatches messages to the registered task handlers\r\n * @param msg\r\n */\r\nself.onmessage = function (msg) {\r\n  // console.log('web worker onmessage', msg.data);\r\n\r\n  // handle initialize message\r\n  if (msg.data.taskType === 'initialize') {\r\n    initialize(msg.data);\r\n\r\n    return;\r\n  }\r\n\r\n  // handle loadWebWorkerTask message\r\n  if (msg.data.taskType === 'loadWebWorkerTask') {\r\n    loadWebWorkerTask(msg.data);\r\n\r\n    return;\r\n  }\r\n\r\n  // dispatch the message if there is a handler registered for it\r\n  if (taskHandlers[msg.data.taskType]) {\r\n    taskHandlers[msg.data.taskType].handler(msg.data, function (result, transferList) {\r\n      self.postMessage({\r\n        taskType: msg.data.taskType,\r\n        status: 'success',\r\n        result,\r\n        workerIndex: msg.data.workerIndex\r\n      }, transferList);\r\n    });\r\n\r\n    return;\r\n  }\r\n\r\n  // not task handler registered - send a failure message back to ui thread\r\n  console.log('no task handler for ', msg.data.taskType);\r\n  console.log(taskHandlers);\r\n  self.postMessage({\r\n    taskType: msg.data.taskType,\r\n    status: 'failed - no task handler registered',\r\n    workerIndex: msg.data.workerIndex\r\n  });\r\n};\r\n","import { registerTaskHandler } from './webWorker.js';\r\nimport decodeTask from './decodeTask/decodeTask.js';\r\n\r\n// register our task\r\nregisterTaskHandler(decodeTask);\r\n\r\nexport { registerTaskHandler };\r\nexport { default as version } from '../version.js';\r\n"],"sourceRoot":""}
